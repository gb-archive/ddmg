import registers;
import instruction;

// Portion of the CPU to deal with CB prefix instructions -
// a set of instructions that deals with bit operations

class CB {

    // Instruction table for the CB instructions
    private Instruction[256] instructions;

    private Registers regs;

    @safe this(ref Registers registers) {
        this.regs = registers;

        this.instructions = [
            Instruction("RLC B", 8, { rlc(regs.b); }),
            Instruction("RLC C", 8, { rlc(regs.c); }),
            Instruction("RLC D", 8, { rlc(regs.d); }),
            Instruction("RLC E", 8, { rlc(regs.e); }),
            Instruction("RLC H", 8, { rlc(regs.h); }),
            Instruction("RLC L", 8, { rlc(regs.l); }),
            Instruction("RLC (HL)", 16, null),
            Instruction("RLC A", 8, { rlc(regs.a); }),
            Instruction("RRC B", 8, null),
            Instruction("RRC C", 8, null),
            Instruction("RRC D", 8, null),
            Instruction("RRC E", 8, null),
            Instruction("RRC H", 8, null),
            Instruction("RRC L", 8, null),
            Instruction("RRC (HL)", 16, null),
            Instruction("RRC A", 8, null),
            Instruction("RL B", 8, null),
            Instruction("RL C", 8, null),
            Instruction("RL D", 8, null),
            Instruction("RL E", 8, null),
            Instruction("RL H", 8, null),
            Instruction("RL L", 8, null),
            Instruction("RL (HL)", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null),
            Instruction("XX", 8, null)
        ];
    }

    /**
     * Handle a CB instruction
     * Assumes that the CB byte has already been read
     * @return How many cycles were elapsed
     */
    @safe public int handle(in ubyte instruction) {
        return 0;
    }

    /**
     * Rotate reg left
     */
    @safe private void rlc(ref reg8 reg) {
        regs.setFlag(Flag.SUBTRACTION, false);
        regs.setFlag(Flag.HALF_OVERFLOW, false);

        immutable bool leftmostBit = reg >> 7;

        reg = cast(ubyte)((reg << 1) + leftmostBit);
        regs.setFlag(Flag.OVERFLOW, leftmostBit);

        regs.setFlag(Flag.ZERO, reg == 0);
    }

}